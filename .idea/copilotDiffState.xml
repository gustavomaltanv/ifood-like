<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/diagram-platuml.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/diagram-platuml.txt" />
              <option name="originalContent" value="@startuml&#10;&#10;' ==== MODELS ====&#10;class Order {&#10;    - orderId: String&#10;    - customer: Customer&#10;    - restaurant: Restaurant&#10;    - currentState: OrderState&#10;    - orderItems: List&lt;OrderItem&gt;&#10;    - observers: List&lt;OrderObserver&gt;&#10;    + clone(): Order&#10;}&#10;class Customer&#10;class Restaurant&#10;class OrderItem&#10;class User&#10;&#10;User &lt;|-- Customer&#10;User &lt;|-- Restaurant&#10;Order &quot;1&quot; o-- &quot;1&quot; Customer&#10;Order &quot;1&quot; o-- &quot;1&quot; Restaurant&#10;Order &quot;1&quot; o-- &quot;*&quot; OrderItem&#10;&#10;' ==== STATE ====&#10;abstract class OrderState {&#10;    + nextState(order: Order)&#10;    + cancel(order: Order)&#10;    + getStatus(): String&#10;}&#10;OrderState &lt;|-- CreatedState&#10;OrderState &lt;|-- PaymentState&#10;OrderState &lt;|-- PreparingState&#10;OrderState &lt;|-- ShippingState&#10;OrderState &lt;|-- DeliveredState&#10;OrderState &lt;|-- CancelledState&#10;Order *-- OrderState&#10;&#10;' ==== STRATEGY ====&#10;interface PaymentStrategy {&#10;    + pay(amount: double, order: Order): boolean&#10;}&#10;PaymentStrategy &lt;|.. CreditCardPayment&#10;PaymentStrategy &lt;|.. PixPayment&#10;class PaymentService {&#10;    - paymentStrategy: PaymentStrategy&#10;    + setPaymentStrategy(PaymentStrategy)&#10;    + executePayment(amount, order)&#10;}&#10;Order ..&gt; PaymentStrategy&#10;Order ..&gt; PaymentService&#10;&#10;' ==== SINGLETON ====&#10;class OrderService {&#10;    - instance: OrderService&#10;    + getInstance(): OrderService&#10;}&#10;OrderService --* Order&#10;&#10;' ==== OBSERVER ====&#10;interface OrderObserver {&#10;    + update(order: Order)&#10;}&#10;OrderObserver &lt;|.. CustomerNotifier&#10;OrderObserver &lt;|.. RestaurantNotifier&#10;OrderObserver &lt;|.. DeliveryNotifier&#10;Order &quot;1&quot; o-- &quot;*&quot; OrderObserver&#10;&#10;' ==== CHAIN OF RESPONSIBILITY ====&#10;abstract class OrderRequestHandler {&#10;    - next: OrderRequestHandler&#10;    + setNext(handler: OrderRequestHandler)&#10;    + handle(request: OrderRequest)&#10;}&#10;OrderRequestHandler &lt;|-- CustomerHandler&#10;OrderRequestHandler &lt;|-- RestaurantHandler&#10;OrderRequestHandler &lt;|-- DeliveryDriverHandler&#10;class OrderRequest&#10;&#10;' ==== BUILDER ====&#10;class OrderBuilder {&#10;    + setOrderId(String): OrderBuilder&#10;    + setCustomer(Customer): OrderBuilder&#10;    + setRestaurant(Restaurant): OrderBuilder&#10;    + addItem(OrderItem): OrderBuilder&#10;    + build(): Order&#10;}&#10;OrderBuilder ..&gt; Order&#10;&#10;' ==== PROTOTYPE ====&#10;Order ..|&gt; Cloneable&#10;&#10;' ==== COMMAND ====&#10;interface Command {&#10;    + execute()&#10;}&#10;Command &lt;|.. CreateOrderCommand&#10;Command &lt;|.. CancelOrderCommand&#10;Command &lt;|.. NextOrderStateCommand&#10;class OrderInvoker {&#10;    - command: Command&#10;    + setCommand(Command)&#10;    + executeCommand()&#10;}&#10;CreateOrderCommand o-- Order&#10;CancelOrderCommand o-- Order&#10;NextOrderStateCommand o-- Order&#10;OrderInvoker ..&gt; Command&#10;&#10;' ==== FACADE ====&#10;class OrderFacade {&#10;    - invoker: OrderInvoker&#10;    + criarPedido(...)&#10;    + cancelarPedido(...)&#10;    + avancarEstadoPedido(...)&#10;}&#10;OrderFacade ..&gt; OrderInvoker&#10;OrderFacade ..&gt; CreateOrderCommand&#10;OrderFacade ..&gt; CancelOrderCommand&#10;OrderFacade ..&gt; NextOrderStateCommand&#10;&#10;@enduml&#10;&#10;" />
              <option name="updatedContent" value="@startuml&#10;&#10;' ==== MODELS ====&#10;class Order {&#10;    - orderId: String&#10;    - customer: Customer&#10;    - restaurant: Restaurant&#10;    - currentState: OrderState&#10;    - orderItems: List&lt;OrderItem&gt;&#10;    - observers: List&lt;OrderObserver&gt;&#10;    + clone(): Order&#10;}&#10;class Customer&#10;class Restaurant&#10;class OrderItem&#10;class User&#10;&#10;User &lt;|-- Customer&#10;User &lt;|-- Restaurant&#10;Order &quot;1&quot; o-- &quot;1&quot; Customer&#10;Order &quot;1&quot; o-- &quot;1&quot; Restaurant&#10;Order &quot;1&quot; o-- &quot;*&quot; OrderItem&#10;&#10;' ==== STATE ====&#10;abstract class OrderState {&#10;    + nextState(order: Order)&#10;    + cancel(order: Order)&#10;    + getStatus(): String&#10;}&#10;OrderState &lt;|-- CreatedState&#10;OrderState &lt;|-- PaymentState&#10;OrderState &lt;|-- PreparingState&#10;OrderState &lt;|-- ShippingState&#10;OrderState &lt;|-- DeliveredState&#10;OrderState &lt;|-- CancelledState&#10;Order *-- OrderState&#10;&#10;' ==== STRATEGY ====&#10;interface PaymentStrategy {&#10;    + pay(amount: double, order: Order): boolean&#10;}&#10;PaymentStrategy &lt;|.. CreditCardPayment&#10;PaymentStrategy &lt;|.. PixPayment&#10;class PaymentService {&#10;    - paymentStrategy: PaymentStrategy&#10;    + setPaymentStrategy(PaymentStrategy)&#10;    + executePayment(amount, order)&#10;}&#10;Order ..&gt; PaymentStrategy&#10;Order ..&gt; PaymentService&#10;&#10;' ==== SINGLETON ====&#10;class OrderService {&#10;    - instance: OrderService&#10;    + getInstance(): OrderService&#10;}&#10;OrderService --* Order&#10;&#10;' ==== OBSERVER ====&#10;interface OrderObserver {&#10;    + update(order: Order)&#10;}&#10;OrderObserver &lt;|.. CustomerNotifier&#10;OrderObserver &lt;|.. RestaurantNotifier&#10;OrderObserver &lt;|.. DeliveryNotifier&#10;Order &quot;1&quot; o-- &quot;*&quot; OrderObserver&#10;&#10;' ==== CHAIN OF RESPONSIBILITY ====&#10;abstract class OrderRequestHandler {&#10;    - next: OrderRequestHandler&#10;    + setNext(handler: OrderRequestHandler)&#10;    + handle(request: OrderRequest)&#10;}&#10;OrderRequestHandler &lt;|-- CustomerHandler&#10;OrderRequestHandler &lt;|-- RestaurantHandler&#10;OrderRequestHandler &lt;|-- DeliveryDriverHandler&#10;OrderRequestHandler &lt;|.. OrderService&#10;OrderRequestHandler o-- OrderRequest&#10;OrderRequest o-- Order&#10;OrderRequest o-- User&#10;&#10;class OrderRequest {&#10;    - order: Order&#10;    - user: User&#10;    - action: String&#10;    - amount: double&#10;}&#10;&#10;' ==== BUILDER ====&#10;class OrderBuilder {&#10;    + setOrderId(String): OrderBuilder&#10;    + setCustomer(Customer): OrderBuilder&#10;    + setRestaurant(Restaurant): OrderBuilder&#10;    + addItem(OrderItem): OrderBuilder&#10;    + build(): Order&#10;}&#10;OrderBuilder ..&gt; Order&#10;&#10;' ==== PROTOTYPE ====&#10;Order ..|&gt; Cloneable&#10;&#10;' ==== COMMAND ====&#10;interface Command {&#10;    + execute()&#10;}&#10;Command &lt;|.. CreateOrderCommand&#10;Command &lt;|.. CancelOrderCommand&#10;Command &lt;|.. NextOrderStateCommand&#10;class OrderInvoker {&#10;    - command: Command&#10;    + setCommand(Command)&#10;    + executeCommand()&#10;}&#10;CreateOrderCommand o-- Order&#10;CancelOrderCommand o-- Order&#10;NextOrderStateCommand o-- Order&#10;OrderInvoker ..&gt; Command&#10;&#10;' ==== FACADE ====&#10;class OrderFacade {&#10;    - invoker: OrderInvoker&#10;    + criarPedido(...)&#10;    + cancelarPedido(...)&#10;    + avancarEstadoPedido(...)&#10;}&#10;OrderFacade ..&gt; OrderInvoker&#10;OrderFacade ..&gt; CreateOrderCommand&#10;OrderFacade ..&gt; CancelOrderCommand&#10;OrderFacade ..&gt; NextOrderStateCommand&#10;&#10;@enduml" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/ifoodlike/builder/OrderBuilder.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/ifoodlike/builder/OrderBuilder.java" />
              <option name="originalContent" value="package com.ifoodlike.builder;&#10;&#10;public class OrderBuilder {&#10;}&#10;" />
              <option name="updatedContent" value="package com.ifoodlike.builder;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class OrderBuilder {&#10;    private String orderId;&#10;    private Customer customer;&#10;    private Restaurant restaurant;&#10;    private List&lt;OrderItem&gt; orderItems = new ArrayList&lt;&gt;();&#10;&#10;    public OrderBuilder setOrderId(String orderId) {&#10;        this.orderId = orderId;&#10;        return this;&#10;    }&#10;&#10;    public OrderBuilder setCustomer(Customer customer) {&#10;        this.customer = customer;&#10;        return this;&#10;    }&#10;&#10;    public OrderBuilder setRestaurant(Restaurant restaurant) {&#10;        this.restaurant = restaurant;&#10;        return this;&#10;    }&#10;&#10;    public OrderBuilder addItem(OrderItem item) {&#10;        this.orderItems.add(item);&#10;        return this;&#10;    }&#10;&#10;    public Order build() {&#10;        Order order = new Order(orderId, customer, restaurant);&#10;        for (OrderItem item : orderItems) {&#10;            order.orderItems.add(item);&#10;        }&#10;        return order;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/ifoodlike/command/CancelOrderCommand.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/ifoodlike/command/CancelOrderCommand.java" />
              <option name="updatedContent" value="package com.ifoodlike.command;&#10;&#10;import com.ifoodlike.model.Order;&#10;&#10;public class CancelOrderCommand implements Command {&#10;    private Order order;&#10;&#10;    public CancelOrderCommand(Order order) {&#10;        this.order = order;&#10;    }&#10;&#10;    @Override&#10;    public void execute() {&#10;        order.cancel();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/ifoodlike/command/Command.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/ifoodlike/command/Command.java" />
              <option name="updatedContent" value="package com.ifoodlike.command;&#10;&#10;public interface Command {&#10;    void execute();&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/ifoodlike/command/CreateOrderCommand.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/ifoodlike/command/CreateOrderCommand.java" />
              <option name="updatedContent" value="package com.ifoodlike.command;&#10;&#10;import com.ifoodlike.model.Order;&#10;import com.ifoodlike.model.Customer;&#10;import com.ifoodlike.model.Restaurant;&#10;&#10;public class CreateOrderCommand implements Command {&#10;    private String orderId;&#10;    private Customer customer;&#10;    private Restaurant restaurant;&#10;    private Order createdOrder;&#10;&#10;    public CreateOrderCommand(String orderId, Customer customer, Restaurant restaurant) {&#10;        this.orderId = orderId;&#10;        this.customer = customer;&#10;        this.restaurant = restaurant;&#10;    }&#10;&#10;    @Override&#10;    public void execute() {&#10;        this.createdOrder = new Order(orderId, customer, restaurant);&#10;    }&#10;&#10;    public Order getCreatedOrder() {&#10;        return createdOrder;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/ifoodlike/command/NextOrderStateCommand.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/ifoodlike/command/NextOrderStateCommand.java" />
              <option name="updatedContent" value="package com.ifoodlike.command;&#10;&#10;import com.ifoodlike.model.Order;&#10;&#10;public class NextOrderStateCommand implements Command {&#10;    private Order order;&#10;&#10;    public NextOrderStateCommand(Order order) {&#10;        this.order = order;&#10;    }&#10;&#10;    @Override&#10;    public void execute() {&#10;        order.nextState();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/ifoodlike/command/OrderInvoker.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/ifoodlike/command/OrderInvoker.java" />
              <option name="updatedContent" value="package com.ifoodlike.command;&#10;&#10;public class OrderInvoker {&#10;    private Command command;&#10;&#10;    public void setCommand(Command command) {&#10;        this.command = command;&#10;    }&#10;&#10;    public void executeCommand() {&#10;        if (command != null) {&#10;            command.execute();&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/ifoodlike/facade/OrderFacade.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/ifoodlike/facade/OrderFacade.java" />
              <option name="updatedContent" value="package com.ifoodlike.facade;&#10;&#10;import com.ifoodlike.command.*;&#10;import com.ifoodlike.model.Customer;&#10;import com.ifoodlike.model.Order;&#10;import com.ifoodlike.model.Restaurant;&#10;&#10;public class OrderFacade {&#10;    private final OrderInvoker invoker = new OrderInvoker();&#10;&#10;    public Order criarPedido(String orderId, Customer customer, Restaurant restaurant) {&#10;        CreateOrderCommand command = new CreateOrderCommand(orderId, customer, restaurant);&#10;        invoker.setCommand(command);&#10;        invoker.executeCommand();&#10;        return command.getCreatedOrder();&#10;    }&#10;&#10;    public void cancelarPedido(Order order) {&#10;        CancelOrderCommand command = new CancelOrderCommand(order);&#10;        invoker.setCommand(command);&#10;        invoker.executeCommand();&#10;    }&#10;&#10;    public void avancarEstadoPedido(Order order) {&#10;        NextOrderStateCommand command = new NextOrderStateCommand(order);&#10;        invoker.setCommand(command);&#10;        invoker.executeCommand();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/ifoodlike/model/Order.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/ifoodlike/model/Order.java" />
              <option name="originalContent" value="package com.ifoodlike.model;&#10;&#10;import com.ifoodlike.state.CancelledState;&#10;import com.ifoodlike.state.CreatedState;&#10;import com.ifoodlike.state.OrderState;&#10;import com.ifoodlike.observer.OrderObserver;&#10;import com.ifoodlike.state.PaymentState;&#10;import com.ifoodlike.strategy.PaymentService;&#10;import com.ifoodlike.strategy.PaymentStrategy;&#10;&#10;import java.lang.reflect.Field;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class Order implements Cloneable {&#10;    private String orderId;&#10;    private Customer customer;&#10;    private Restaurant restaurant;&#10;    private OrderState currentState;&#10;    private List&lt;OrderItem&gt; orderItems = new ArrayList&lt;&gt;();&#10;    private List&lt;OrderObserver&gt; observers;&#10;&#10;    public Order(String orderId, Customer customer, Restaurant restaurant) {&#10;        this.orderId = orderId;&#10;        this.customer = customer;&#10;        this.restaurant = restaurant;&#10;        this.currentState = new CreatedState();&#10;        this.observers = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    public String getOrderId() {&#10;        return orderId;&#10;    }&#10;&#10;    public Customer getCustomer() {&#10;        return customer;&#10;    }&#10;&#10;    public Restaurant getRestaurant() {&#10;        return restaurant;&#10;    }&#10;&#10;    public OrderState getCurrentState() {&#10;        return currentState;&#10;    }&#10;&#10;    public void changeState(OrderState newState) {&#10;        this.currentState = newState;&#10;        notifyObservers();&#10;    }&#10;&#10;    public void nextState() {&#10;        this.currentState.nextState(this);&#10;    }&#10;&#10;    public void cancel() {&#10;        this.currentState.cancel(this);&#10;    }&#10;&#10;    public boolean initiatePayment(double amount, PaymentStrategy paymentStrategy) {&#10;        if (!(currentState instanceof CreatedState)) {&#10;            return false;&#10;        }&#10;&#10;        PaymentService paymentService = new PaymentService();&#10;        paymentService.setPaymentStrategy(paymentStrategy);&#10;&#10;        boolean paymentSuccess = false;&#10;        try {&#10;            paymentSuccess = paymentService.executePayment(amount, this);&#10;        } catch (IllegalStateException e) {&#10;            e.printStackTrace();&#10;        }&#10;&#10;        if (paymentSuccess) {&#10;            changeState(new PaymentState());&#10;            return true;&#10;        } else {&#10;            changeState(new CancelledState());&#10;            return false;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Order{&quot; +&#10;                &quot;orderId='&quot; + orderId + '\'' +&#10;                &quot;, customer=&quot; + (customer != null ? customer.getName() : &quot;N/A&quot;) +&#10;                &quot;, restaurant=&quot; + (restaurant != null ? restaurant.getName() : &quot;N/A&quot;) +&#10;                &quot;, currentState=&quot; + currentState.getStatus() +&#10;                '}';&#10;    }&#10;&#10;    public void addObserver(OrderObserver observer) {&#10;        this.observers.add(observer);&#10;    }&#10;&#10;    public void removeObserver(OrderObserver observer) {&#10;        this.observers.remove(observer);&#10;    }&#10;&#10;    public void notifyObservers() {&#10;        for (OrderObserver observer : observers) {&#10;            observer.update(this);&#10;        }&#10;    }&#10;&#10;    public List&lt;OrderItem&gt; getOrderItems() {&#10;        return orderItems;&#10;    }&#10;&#10;    public void setOrderItems(List&lt;OrderItem&gt; orderItems) {&#10;        this.orderItems = orderItems;&#10;    }&#10;&#10;    @Override&#10;    public Order clone() {&#10;        try {&#10;            Order cloned = (Order) super.clone();&#10;            cloned.orderItems = new ArrayList&lt;&gt;();&#10;            for (OrderItem item : this.orderItems) {&#10;                OrderItem clonedItem = new OrderItem(&quot;item&quot;);&#10;                Field f = OrderItem.class.getDeclaredField(&quot;item&quot;);&#10;                f.setAccessible(true);&#10;                f.set(clonedItem, f.get(item));&#10;                cloned.orderItems.add(clonedItem);&#10;            }&#10;            cloned.observers = new ArrayList&lt;&gt;();&#10;            return cloned;&#10;        } catch (Exception e) {&#10;            throw new AssertionError(e);&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.ifoodlike.model;&#10;&#10;import com.ifoodlike.state.CancelledState;&#10;import com.ifoodlike.state.CreatedState;&#10;import com.ifoodlike.state.OrderState;&#10;import com.ifoodlike.observer.OrderObserver;&#10;import com.ifoodlike.state.PaymentState;&#10;import com.ifoodlike.strategy.PaymentService;&#10;import com.ifoodlike.strategy.PaymentStrategy;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class Order implements Cloneable {&#10;    private String orderId;&#10;    private Customer customer;&#10;    private Restaurant restaurant;&#10;    private OrderState currentState;&#10;    private List&lt;OrderItem&gt; orderItems = new ArrayList&lt;&gt;();&#10;    private List&lt;OrderObserver&gt; observers;&#10;&#10;    public Order(String orderId, Customer customer, Restaurant restaurant) {&#10;        this.orderId = orderId;&#10;        this.customer = customer;&#10;        this.restaurant = restaurant;&#10;        this.currentState = new CreatedState();&#10;        this.observers = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    public String getOrderId() {&#10;        return orderId;&#10;    }&#10;&#10;    public Customer getCustomer() {&#10;        return customer;&#10;    }&#10;&#10;    public Restaurant getRestaurant() {&#10;        return restaurant;&#10;    }&#10;&#10;    public OrderState getCurrentState() {&#10;        return currentState;&#10;    }&#10;&#10;    public void changeState(OrderState newState) {&#10;        this.currentState = newState;&#10;        notifyObservers();&#10;    }&#10;&#10;    public void nextState() {&#10;        this.currentState.nextState(this);&#10;    }&#10;&#10;    public void cancel() {&#10;        this.currentState.cancel(this);&#10;    }&#10;&#10;    public boolean initiatePayment(double amount, PaymentStrategy paymentStrategy) {&#10;        if (!(currentState instanceof CreatedState)) {&#10;            return false;&#10;        }&#10;&#10;        PaymentService paymentService = new PaymentService();&#10;        paymentService.setPaymentStrategy(paymentStrategy);&#10;&#10;        boolean paymentSuccess = false;&#10;        try {&#10;            paymentSuccess = paymentService.executePayment(amount, this);&#10;        } catch (IllegalStateException e) {&#10;            e.printStackTrace();&#10;        }&#10;&#10;        if (paymentSuccess) {&#10;            changeState(new PaymentState());&#10;            return true;&#10;        } else {&#10;            changeState(new CancelledState());&#10;            return false;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Order{&quot; +&#10;                &quot;orderId='&quot; + orderId + '\'' +&#10;                &quot;, customer=&quot; + (customer != null ? customer.getName() : &quot;N/A&quot;) +&#10;                &quot;, restaurant=&quot; + (restaurant != null ? restaurant.getName() : &quot;N/A&quot;) +&#10;                &quot;, currentState=&quot; + currentState.getStatus() +&#10;                '}';&#10;    }&#10;&#10;    public void addObserver(OrderObserver observer) {&#10;        this.observers.add(observer);&#10;    }&#10;&#10;    public void removeObserver(OrderObserver observer) {&#10;        this.observers.remove(observer);&#10;    }&#10;&#10;    public void notifyObservers() {&#10;        for (OrderObserver observer : observers) {&#10;            observer.update(this);&#10;        }&#10;    }&#10;&#10;    public List&lt;OrderItem&gt; getOrderItems() {&#10;        return orderItems;&#10;    }&#10;&#10;    public void setOrderItems(List&lt;OrderItem&gt; orderItems) {&#10;        this.orderItems = orderItems;&#10;    }&#10;&#10;    @Override&#10;    public Order clone() {&#10;        try {&#10;            Order cloned = (Order) super.clone();&#10;            cloned.orderItems = new ArrayList&lt;&gt;();&#10;            for (OrderItem item : this.orderItems) {&#10;                OrderItem clonedItem = new OrderItem(item.getNome());&#10;                cloned.orderItems.add(clonedItem);&#10;            }&#10;            cloned.observers = new ArrayList&lt;&gt;();&#10;            return cloned;&#10;        } catch (Exception e) {&#10;            throw new AssertionError(e);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/com/ifoodlike/builder/OrderBuilderTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/com/ifoodlike/builder/OrderBuilderTest.java" />
              <option name="originalContent" value="package com.ifoodlike.builder;&#10;&#10;import com.ifoodlike.model.Customer;&#10;import com.ifoodlike.model.Order;&#10;import com.ifoodlike.model.OrderItem;&#10;import com.ifoodlike.model.Restaurant;&#10;&#10;import org.junit.jupiter.api.Test;&#10;import java.util.List;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;class OrderBuilderTest {&#10;    @Test&#10;    void testBuildOrderWithBasicData() {&#10;        Customer customer = new Customer(&quot;c1&quot;, &quot;Cliente 1&quot;, &quot;cliente1@email.com&quot;);&#10;        Restaurant restaurant = new Restaurant(&quot;r1&quot;, &quot;Restaurante 1&quot;, &quot;rest1@email.com&quot;, &quot;rest1&quot;, &quot;Rua 1&quot;);&#10;        Order order = new OrderBuilder()&#10;                .setOrderId(&quot;o1&quot;)&#10;                .setCustomer(customer)&#10;                .setRestaurant(restaurant)&#10;                .build();&#10;        assertEquals(&quot;o1&quot;, order.getOrderId());&#10;        assertEquals(customer, order.getCustomer());&#10;        assertEquals(restaurant, order.getRestaurant());&#10;        assertTrue(order.getOrderItems().isEmpty());&#10;    }&#10;&#10;    @Test&#10;    void testBuildOrderWithItems() {&#10;        Customer customer = new Customer(&quot;c2&quot;, &quot;Cliente 2&quot;, &quot;cliente2@email.com&quot;);&#10;        Restaurant restaurant = new Restaurant(&quot;r2&quot;, &quot;Restaurante 2&quot;, &quot;rest2@email.com&quot;, &quot;rest2&quot;, &quot;Rua 2&quot;);&#10;        OrderItem item1 = new OrderItem(&quot;item1&quot;);&#10;        OrderItem item2 = new OrderItem(&quot;item2&quot;);&#10;        Order order = new OrderBuilder()&#10;                .setOrderId(&quot;o2&quot;)&#10;                .setCustomer(customer)&#10;                .setRestaurant(restaurant)&#10;                .addItem(item1)&#10;                .addItem(item2)&#10;                .build();&#10;        List&lt;OrderItem&gt; items = order.getOrderItems();&#10;        assertEquals(2, items.size());&#10;        assertTrue(items.contains(item1));&#10;        assertTrue(items.contains(item2));&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.ifoodlike.builder;&#10;&#10;import com.ifoodlike.model.Customer;&#10;import com.ifoodlike.model.Order;&#10;import com.ifoodlike.model.OrderItem;&#10;import com.ifoodlike.model.Restaurant;&#10;&#10;import org.junit.jupiter.api.Test;&#10;import java.util.List;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;class OrderBuilderTest {&#10;    @Test&#10;    void testBuildOrderWithBasicDataOrderId() {&#10;        Customer customer = new Customer(&quot;c1&quot;, &quot;Cliente 1&quot;, &quot;cliente1@email.com&quot;);&#10;        Restaurant restaurant = new Restaurant(&quot;r1&quot;, &quot;Restaurante 1&quot;, &quot;rest1@email.com&quot;, &quot;rest1&quot;, &quot;Rua 1&quot;);&#10;        Order order = new OrderBuilder()&#10;                .setOrderId(&quot;o1&quot;)&#10;                .setCustomer(customer)&#10;                .setRestaurant(restaurant)&#10;                .build();&#10;        assertEquals(&quot;o1&quot;, order.getOrderId());&#10;    }&#10;&#10;    @Test&#10;    void testBuildOrderWithBasicDataCustomer() {&#10;        Customer customer = new Customer(&quot;c1&quot;, &quot;Cliente 1&quot;, &quot;cliente1@email.com&quot;);&#10;        Restaurant restaurant = new Restaurant(&quot;r1&quot;, &quot;Restaurante 1&quot;, &quot;rest1@email.com&quot;, &quot;rest1&quot;, &quot;Rua 1&quot;);&#10;        Order order = new OrderBuilder()&#10;                .setOrderId(&quot;o1&quot;)&#10;                .setCustomer(customer)&#10;                .setRestaurant(restaurant)&#10;                .build();&#10;        assertEquals(customer, order.getCustomer());&#10;    }&#10;&#10;    @Test&#10;    void testBuildOrderWithBasicDataRestaurant() {&#10;        Customer customer = new Customer(&quot;c1&quot;, &quot;Cliente 1&quot;, &quot;cliente1@email.com&quot;);&#10;        Restaurant restaurant = new Restaurant(&quot;r1&quot;, &quot;Restaurante 1&quot;, &quot;rest1@email.com&quot;, &quot;rest1&quot;, &quot;Rua 1&quot;);&#10;        Order order = new OrderBuilder()&#10;                .setOrderId(&quot;o1&quot;)&#10;                .setCustomer(customer)&#10;                .setRestaurant(restaurant)&#10;                .build();&#10;        assertEquals(restaurant, order.getRestaurant());&#10;    }&#10;&#10;    @Test&#10;    void testBuildOrderWithBasicDataItemsEmpty() {&#10;        Customer customer = new Customer(&quot;c1&quot;, &quot;Cliente 1&quot;, &quot;cliente1@email.com&quot;);&#10;        Restaurant restaurant = new Restaurant(&quot;r1&quot;, &quot;Restaurante 1&quot;, &quot;rest1@email.com&quot;, &quot;rest1&quot;, &quot;Rua 1&quot;);&#10;        Order order = new OrderBuilder()&#10;                .setOrderId(&quot;o1&quot;)&#10;                .setCustomer(customer)&#10;                .setRestaurant(restaurant)&#10;                .build();&#10;        assertTrue(order.getOrderItems().isEmpty());&#10;    }&#10;&#10;    @Test&#10;    void testBuildOrderWithItemsSize() {&#10;        Customer customer = new Customer(&quot;c2&quot;, &quot;Cliente 2&quot;, &quot;cliente2@email.com&quot;);&#10;        Restaurant restaurant = new Restaurant(&quot;r2&quot;, &quot;Restaurante 2&quot;, &quot;rest2@email.com&quot;, &quot;rest2&quot;, &quot;Rua 2&quot;);&#10;        OrderItem item1 = new OrderItem(&quot;item1&quot;);&#10;        OrderItem item2 = new OrderItem(&quot;item2&quot;);&#10;        Order order = new OrderBuilder()&#10;                .setOrderId(&quot;o2&quot;)&#10;                .setCustomer(customer)&#10;                .setRestaurant(restaurant)&#10;                .addItem(item1)&#10;                .addItem(item2)&#10;                .build();&#10;        assertEquals(2, order.getOrderItems().size());&#10;    }&#10;&#10;    @Test&#10;    void testBuildOrderWithItemsContent() {&#10;        Customer customer = new Customer(&quot;c2&quot;, &quot;Cliente 2&quot;, &quot;cliente2@email.com&quot;);&#10;        Restaurant restaurant = new Restaurant(&quot;r2&quot;, &quot;Restaurante 2&quot;, &quot;rest2@email.com&quot;, &quot;rest2&quot;, &quot;Rua 2&quot;);&#10;        OrderItem item1 = new OrderItem(&quot;item1&quot;);&#10;        OrderItem item2 = new OrderItem(&quot;item2&quot;);&#10;        Order order = new OrderBuilder()&#10;                .setOrderId(&quot;o2&quot;)&#10;                .setCustomer(customer)&#10;                .setRestaurant(restaurant)&#10;                .addItem(item1)&#10;                .addItem(item2)&#10;                .build();&#10;        assertEquals(&quot;item1&quot;, order.getOrderItems().get(0).getNome());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/com/ifoodlike/command/CommandTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/com/ifoodlike/command/CommandTest.java" />
              <option name="originalContent" value="package com.ifoodlike.command;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;class CommandTest {&#10;&#10;}" />
              <option name="updatedContent" value="package com.ifoodlike.command;&#10;&#10;import com.ifoodlike.model.Customer;&#10;import com.ifoodlike.model.Order;&#10;import com.ifoodlike.model.Restaurant;&#10;import org.junit.jupiter.api.Test;&#10;&#10;import static org.junit.jupiter.api.Assertions.assertEquals;&#10;&#10;class CommandTest {&#10;    @Test&#10;    void testCreateOrderCommandCreatesOrder() {&#10;        Customer customer = new Customer(&quot;c1&quot;, &quot;Cliente 1&quot;, &quot;c1@email.com&quot;);&#10;        Restaurant restaurant = new Restaurant(&quot;r1&quot;, &quot;Restaurante 1&quot;, &quot;r1@email.com&quot;, &quot;rest1&quot;, &quot;Rua 1&quot;);&#10;        CreateOrderCommand command = new CreateOrderCommand(&quot;o1&quot;, customer, restaurant);&#10;        command.execute();&#10;        Order order = command.getCreatedOrder();&#10;        assertEquals(&quot;o1&quot;, order.getOrderId());&#10;    }&#10;&#10;    @Test&#10;    void testCancelOrderCommandCancelsOrder() {&#10;        Customer customer = new Customer(&quot;c2&quot;, &quot;Cliente 2&quot;, &quot;c2@email.com&quot;);&#10;        Restaurant restaurant = new Restaurant(&quot;r2&quot;, &quot;Restaurante 2&quot;, &quot;r2@email.com&quot;, &quot;rest2&quot;, &quot;Rua 2&quot;);&#10;        Order order = new Order(&quot;o2&quot;, customer, restaurant);&#10;        CancelOrderCommand command = new CancelOrderCommand(order);&#10;        command.execute();&#10;        assertEquals(&quot;Cancelado&quot;, order.getCurrentState().getStatus());&#10;    }&#10;&#10;    @Test&#10;    void testNextOrderStateCommandAdvancesState() {&#10;        Customer customer = new Customer(&quot;c3&quot;, &quot;Cliente 3&quot;, &quot;c3@email.com&quot;);&#10;        Restaurant restaurant = new Restaurant(&quot;r3&quot;, &quot;Restaurante 3&quot;, &quot;r3@email.com&quot;, &quot;rest3&quot;, &quot;Rua 3&quot;);&#10;        Order order = new Order(&quot;o3&quot;, customer, restaurant);&#10;        NextOrderStateCommand command = new NextOrderStateCommand(order);&#10;        command.execute();&#10;        assertEquals(&quot;Pagamento&quot;, order.getCurrentState().getStatus());&#10;    }&#10;&#10;    @Test&#10;    void testOrderInvokerExecutesCommand() {&#10;        Customer customer = new Customer(&quot;c4&quot;, &quot;Cliente 4&quot;, &quot;c4@email.com&quot;);&#10;        Restaurant restaurant = new Restaurant(&quot;r4&quot;, &quot;Restaurante 4&quot;, &quot;r4@email.com&quot;, &quot;rest4&quot;, &quot;Rua 4&quot;);&#10;        Order order = new Order(&quot;o4&quot;, customer, restaurant);&#10;        CancelOrderCommand command = new CancelOrderCommand(order);&#10;        OrderInvoker invoker = new OrderInvoker();&#10;        invoker.setCommand(command);&#10;        invoker.executeCommand();&#10;        assertEquals(&quot;Cancelado&quot;, order.getCurrentState().getStatus());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/com/ifoodlike/facade/OrderFacadeTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/com/ifoodlike/facade/OrderFacadeTest.java" />
              <option name="originalContent" value="package com.ifoodlike.facade;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;class OrderFacadeTest {&#10;&#10;}" />
              <option name="updatedContent" value="package com.ifoodlike.facade;&#10;&#10;import com.ifoodlike.model.Customer;&#10;import com.ifoodlike.model.Order;&#10;import com.ifoodlike.model.Restaurant;&#10;import org.junit.jupiter.api.Test;&#10;&#10;import static org.junit.jupiter.api.Assertions.assertEquals;&#10;&#10;class OrderFacadeTest {&#10;    @Test&#10;    void testCriarPedido() {&#10;        OrderFacade facade = new OrderFacade();&#10;        Customer customer = new Customer(&quot;c1&quot;, &quot;Cliente 1&quot;, &quot;c1@email.com&quot;);&#10;        Restaurant restaurant = new Restaurant(&quot;r1&quot;, &quot;Restaurante 1&quot;, &quot;r1@email.com&quot;, &quot;rest1&quot;, &quot;Rua 1&quot;);&#10;        Order order = facade.criarPedido(&quot;o1&quot;, customer, restaurant);&#10;        assertEquals(&quot;o1&quot;, order.getOrderId());&#10;    }&#10;&#10;    @Test&#10;    void testCancelarPedido() {&#10;        OrderFacade facade = new OrderFacade();&#10;        Customer customer = new Customer(&quot;c2&quot;, &quot;Cliente 2&quot;, &quot;c2@email.com&quot;);&#10;        Restaurant restaurant = new Restaurant(&quot;r2&quot;, &quot;Restaurante 2&quot;, &quot;r2@email.com&quot;, &quot;rest2&quot;, &quot;Rua 2&quot;);&#10;        Order order = facade.criarPedido(&quot;o2&quot;, customer, restaurant);&#10;        facade.cancelarPedido(order);&#10;        assertEquals(&quot;Cancelado&quot;, order.getCurrentState().getStatus());&#10;    }&#10;&#10;    @Test&#10;    void testAvancarEstadoPedido() {&#10;        OrderFacade facade = new OrderFacade();&#10;        Customer customer = new Customer(&quot;c3&quot;, &quot;Cliente 3&quot;, &quot;c3@email.com&quot;);&#10;        Restaurant restaurant = new Restaurant(&quot;r3&quot;, &quot;Restaurante 3&quot;, &quot;r3@email.com&quot;, &quot;rest3&quot;, &quot;Rua 3&quot;);&#10;        Order order = facade.criarPedido(&quot;o3&quot;, customer, restaurant);&#10;        facade.avancarEstadoPedido(order);&#10;        assertEquals(&quot;Pagamento&quot;, order.getCurrentState().getStatus());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/com/ifoodlike/prototype/PrototypeTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/com/ifoodlike/prototype/PrototypeTest.java" />
              <option name="originalContent" value="package com.ifoodlike.prototype;&#10;&#10;public class PrototypeTest {&#10;}&#10;" />
              <option name="updatedContent" value="package com.ifoodlike.prototype;&#10;&#10;import com.ifoodlike.model.Customer;&#10;import com.ifoodlike.model.Order;&#10;import com.ifoodlike.model.OrderItem;&#10;import com.ifoodlike.model.Restaurant;&#10;import org.junit.jupiter.api.Test;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;public class PrototypeTest {&#10;    @Test&#10;    void testCloneOrderId() {&#10;        Customer customer = new Customer(&quot;c1&quot;, &quot;Cliente 1&quot;, &quot;cliente1@email.com&quot;);&#10;        Restaurant restaurant = new Restaurant(&quot;r1&quot;, &quot;Restaurante 1&quot;, &quot;rest1@email.com&quot;, &quot;rest1&quot;, &quot;Rua 1&quot;);&#10;        Order original = new Order(&quot;o1&quot;, customer, restaurant);&#10;        Order clone = original.clone();&#10;        assertEquals(original.getOrderId(), clone.getOrderId());&#10;    }&#10;&#10;    @Test&#10;    void testCloneOrderCustomer() {&#10;        Customer customer = new Customer(&quot;c2&quot;, &quot;Cliente 2&quot;, &quot;cliente2@email.com&quot;);&#10;        Restaurant restaurant = new Restaurant(&quot;r2&quot;, &quot;Restaurante 2&quot;, &quot;rest2@email.com&quot;, &quot;rest2&quot;, &quot;Rua 2&quot;);&#10;        Order original = new Order(&quot;o2&quot;, customer, restaurant);&#10;        Order clone = original.clone();&#10;        assertEquals(original.getCustomer(), clone.getCustomer());&#10;    }&#10;&#10;    @Test&#10;    void testCloneOrderItemsSize() {&#10;        Customer customer = new Customer(&quot;c3&quot;, &quot;Cliente 3&quot;, &quot;cliente3@email.com&quot;);&#10;        Restaurant restaurant = new Restaurant(&quot;r3&quot;, &quot;Restaurante 3&quot;, &quot;rest3@email.com&quot;, &quot;rest3&quot;, &quot;Rua 3&quot;);&#10;        Order original = new Order(&quot;o3&quot;, customer, restaurant);&#10;        original.getOrderItems().add(new OrderItem(&quot;Pizza&quot;));&#10;        original.getOrderItems().add(new OrderItem(&quot;Hamburguer&quot;));&#10;        Order clone = original.clone();&#10;        assertEquals(original.getOrderItems().size(), clone.getOrderItems().size());&#10;    }&#10;&#10;    @Test&#10;    void testCloneOrderItemsIndependence() {&#10;        Customer customer = new Customer(&quot;c4&quot;, &quot;Cliente 4&quot;, &quot;cliente4@email.com&quot;);&#10;        Restaurant restaurant = new Restaurant(&quot;r4&quot;, &quot;Restaurante 4&quot;, &quot;rest4@email.com&quot;, &quot;rest4&quot;, &quot;Rua 4&quot;);&#10;        Order original = new Order(&quot;o4&quot;, customer, restaurant);&#10;        original.getOrderItems().add(new OrderItem(&quot;Coxinha&quot;));&#10;        Order clone = original.clone();&#10;        clone.getOrderItems().add(new OrderItem(&quot;Pastel&quot;));&#10;        assertNotEquals(original.getOrderItems().size(), clone.getOrderItems().size());&#10;    }&#10;&#10;    @Test&#10;    void testCloneOrderItemContent() {&#10;        Customer customer = new Customer(&quot;c5&quot;, &quot;Cliente 5&quot;, &quot;cliente5@email.com&quot;);&#10;        Restaurant restaurant = new Restaurant(&quot;r5&quot;, &quot;Restaurante 5&quot;, &quot;rest5@email.com&quot;, &quot;rest5&quot;, &quot;Rua 5&quot;);&#10;        Order original = new Order(&quot;o5&quot;, customer, restaurant);&#10;        original.getOrderItems().add(new OrderItem(&quot;Refrigerante&quot;));&#10;        Order clone = original.clone();&#10;        assertEquals(&quot;Refrigerante&quot;, clone.getOrderItems().get(0).getNome());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>